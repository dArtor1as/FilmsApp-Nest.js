generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  reviews   Review[]
  ratings   Rating[]
  comments  Comment[]
  favorites Favorite[]
  Token Token[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Movie {
  id            Int      @id @default(autoincrement())
  tmdbId        Int      @unique // ID з TMDB API
  title         String
  posterPath    String?  // URL до постера
  genre         String[]
  releaseYear   Int
  averageRating Float    @default(0.0) // Середній рейтинг користувачів
  userRating    Float?   // Нова колонка
  reviews       Review[]
  ratings       Rating[]
  favorites     Favorite[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int      // Оцінка від 1 до 10
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  createdAt DateTime @default(now())
}

model Token {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  token        String   @unique // Сам JWT токен
  createdAt    DateTime @default(now())
  expiresAt    DateTime // Дата закінчення терміну дії токена
  revoked      Boolean  @default(false) // Статус токена: активний чи відкликаний
  revokedAt    DateTime? // Дата відкликання токена, якщо застосовується
}